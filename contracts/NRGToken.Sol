// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract NRGToken {
    // State Variables
    string public constant NAME = "NRG Token";
    string public constant SYMBOL = "NRG";
    string public constant STANDARD = "NRG Token v1.0";
    uint8 public constant DECIMALS = 18;
    uint256 public constant INITIAL_SUPPLY =
        10000000 * (10 ** uint256(DECIMALS));
    uint256 internal _totalSupply;
    address private immutable owner;

    // Events
    event Transfer(
        address indexed _from,
        address indexed _to,
        uint256 _value,
        uint256 balanceOfSender,
        uint256 balanceOfReciever
    );
    event Approval(
        address indexed _owner,
        address indexed _spender,
        uint256 _value
    );

    // Mappings
    mapping(address => uint256) internal balances;
    mapping(address => mapping(address => uint256)) internal allowed;

    // Constructor
    constructor() {
        _totalSupply = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        emit Transfer(
            address(0),
            msg.sender,
            INITIAL_SUPPLY,
            balances[address(0)],
            balances[msg.sender]
        );
        owner = msg.sender;
    }

    // Functions
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function transfer(
        address _to,
        uint256 _value
    ) public returns (bool success) {
        if (_to == address(0)) revert();
        if (_value > balances[msg.sender]) revert();
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        emit Transfer(
            msg.sender,
            _to,
            _value,
            balances[msg.sender],
            balances[_to]
        );
        return true;
    }

    function transferFrom(
        address _from,
        address _to,
        uint256 _value
    ) public returns (bool success) {
        if (_to == address(0)) revert();
        if (_value > balances[_from]) revert();
        if (_value > allowed[_from][msg.sender]) revert();
        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;
        emit Transfer(_from, _to, _value, balances[_from], balances[_to]);
        return true;
    }

    function approve(
        address _spender,
        uint256 _value
    ) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(
        address _owner,
        address _spender
    ) public view returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    function increaseApproval(
        address _spender,
        uint256 _addedValue
    ) public returns (bool success) {
        allowed[msg.sender][_spender] += _addedValue;
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    function decreaseApproval(
        address _spender,
        uint256 _subtractedValue
    ) public returns (bool success) {
        uint256 oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue - _subtractedValue;
        }
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }
}
